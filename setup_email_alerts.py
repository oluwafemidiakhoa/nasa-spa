#!/usr/bin/env python3
"""
Email Alert Setup for NASA Space Weather Forecaster
Helps configure email notifications
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create .env file from template"""
    print("NASA Space Weather Email Alert Setup")
    print("=" * 50)
    
    # Check if .env already exists
    env_path = Path(".env")
    if env_path.exists():
        print("WARNING: .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ").lower()
        if response != 'y':
            print("Setup cancelled.")
            return False
    
    # Get email configuration from user
    print("\nEmail Configuration:")
    print("Note: Use app passwords for Gmail/Outlook, not your regular password")
    
    email_user = input("Email address (sender): ").strip()
    if not email_user:
        print("ERROR: Email address is required!")
        return False
    
    email_password = input("Email password/app password: ").strip()
    if not email_password:
        print("ERROR: Email password is required!")
        return False
    
    test_recipient = input(f"Test recipient email (default: {email_user}): ").strip()
    if not test_recipient:
        test_recipient = email_user
    
    # SMTP settings
    print("\nSMTP Configuration:")
    print("1. Zoho (smtp.zoho.com:587)")
    print("2. Gmail (smtp.gmail.com:587)")
    print("3. Outlook (smtp-mail.outlook.com:587)")
    print("4. Custom")
    
    choice = input("Select SMTP provider (1-4, default: 1): ").strip()
    
    smtp_configs = {
        "1": {"server": "smtp.zoho.com", "port": "587"},
        "2": {"server": "smtp.gmail.com", "port": "587"},
        "3": {"server": "smtp-mail.outlook.com", "port": "587"},
    }
    
    if choice in smtp_configs:
        smtp_server = smtp_configs[choice]["server"]
        smtp_port = smtp_configs[choice]["port"]
    elif choice == "4":
        smtp_server = input("SMTP server: ").strip()
        smtp_port = input("SMTP port (default: 587): ").strip() or "587"
    else:
        # Default to Zoho
        smtp_server = "smtp.zoho.com"
        smtp_port = "587"
    
    # Create .env file
    env_content = f"""# NASA Space Weather Forecaster Configuration
# Generated by setup script

# NASA API Configuration
NASA_API_KEY=DEMO_KEY

# Email Alert Configuration
EMAIL_USER={email_user}
EMAIL_PASSWORD={email_password}
TEST_ALERT_EMAIL={test_recipient}

# SMTP Settings
SMTP_SERVER={smtp_server}
SMTP_PORT={smtp_port}
SMTP_TLS=true

# Optional API Keys (for advanced features)
# OPENAI_API_KEY=your_openai_key_here
# ANTHROPIC_API_KEY=your_anthropic_key_here
"""
    
    try:
        with open(".env", "w") as f:
            f.write(env_content)
        
        print(f"\nSUCCESS: Email configuration saved to .env")
        print(f"Sender: {email_user}")
        print(f"Test recipient: {test_recipient}")
        print(f"SMTP: {smtp_server}:{smtp_port}")
        
        return True
        
    except Exception as e:
        print(f"ERROR: Failed to create .env file: {e}")
        return False

def test_email_setup():
    """Test the email configuration"""
    print("\nTesting email configuration...")
    
    try:
        # Add backend to path
        sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))
        
        # Import email system
        try:
            from backend.email_alerts import EmailAlerter
        except ImportError:
            from email_alerts import EmailAlerter
        
        # Test email
        alerter = EmailAlerter()
        
        if not alerter.enabled:
            print("ERROR: Email not configured. Please check your .env file.")
            return False
        
        print("Sending test email...")
        success = alerter.test_email_connection()
        
        if success:
            print("SUCCESS: Test email sent successfully!")
            print(f"Check your inbox: {alerter.test_recipient}")
            return True
        else:
            print("ERROR: Test email failed!")
            print("TIP: Check your email credentials and SMTP settings.")
            return False
            
    except Exception as e:
        print(f"ERROR: Email test error: {e}")
        print("TIP: Make sure your email credentials are correct.")
        return False

def main():
    """Main setup function"""
    print("NASA Space Weather Forecaster")
    print("Email Alert Setup")
    print("=" * 50)
    
    # Step 1: Create .env file
    if not create_env_file():
        print("Setup failed!")
        return
    
    # Step 2: Test email
    print("\nWould you like to test the email configuration now?")
    test_now = input("Test email? (Y/n): ").lower()
    
    if test_now != 'n':
        if test_email_setup():
            print("\nSUCCESS: Email alerts are ready!")
            print("\nNext steps:")
            print("1. Start the API server: python simple_api_server.py")
            print("2. Open any dashboard in your browser")
            print("3. Click 'EMAIL ALERT' to send space weather notifications")
        else:
            print("\nWARNING: Email setup completed but test failed.")
            print("TIP: You can test later or check your configuration.")
    
    print("\nDashboard URLs:")
    print("  • Main Hub: dashboard_hub.html")
    print("  • Professional: professional_dashboard.html")
    print("  • Expert: expert_dashboard.html")

if __name__ == "__main__":
    main()