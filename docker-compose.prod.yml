# Production Docker Compose configuration with PostgreSQL and Redis
version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: nasa-weather-backend-prod
    restart: unless-stopped
    environment:
      - NASA_API_KEY=${NASA_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DATABASE_URL=postgresql://nasa_user:${POSTGRES_PASSWORD}@postgres:5432/space_weather
      - REDIS_URL=redis://redis:6379/0
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_FROM_PHONE=${TWILIO_FROM_PHONE}
      - TEST_ALERT_EMAIL=${TEST_ALERT_EMAIL}
      - TEST_ALERT_PHONE=${TEST_ALERT_PHONE}
      - LOG_LEVEL=INFO
    volumes:
      - /var/log/nasa-weather:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nasa_weather_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend dashboard service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: nasa-weather-frontend-prod
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_BASE_URL=https://${DOMAIN:-localhost}/api
      - NEXT_PUBLIC_WS_URL=wss://${DOMAIN:-localhost}/ws
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - nasa_weather_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: nasa-weather-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=space_weather
      - POSTGRES_USER=nasa_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nasa_weather_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nasa_user -d space_weather"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: nasa-weather-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - nasa_weather_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nasa-weather-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - nasa_weather_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring service (runs forecasting scheduler)
  monitor:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: nasa-weather-monitor-prod
    restart: unless-stopped
    command: ["python", "backend/scheduler.py"]
    environment:
      - NASA_API_KEY=${NASA_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DATABASE_URL=postgresql://nasa_user:${POSTGRES_PASSWORD}@postgres:5432/space_weather
      - REDIS_URL=redis://redis:6379/0
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_FROM_PHONE=${TWILIO_FROM_PHONE}
    volumes:
      - /var/log/nasa-weather:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nasa_weather_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  nasa_weather_network:
    driver: bridge